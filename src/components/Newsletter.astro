---
// Newsletter signup component for NBS Supplements
// Professional email capture with Netlify Forms integration
// Includes validation, GDPR compliance, and success/error states

export interface Props {
  title?: string;
  description?: string;
  placeholder?: string;
  buttonText?: string;
  variant?: 'default' | 'minimal' | 'card';
  size?: 'sm' | 'md' | 'lg';
  showConsent?: boolean;
}

const {
  title = "Stay Updated",
  description = "Get expert supplement insights, new product updates, and exclusive offers delivered to your inbox.",
  placeholder = "Enter your email address",
  buttonText = "Subscribe",
  variant = 'default',
  size = 'md',
  showConsent = true
} = Astro.props;

// Generate unique IDs for form elements
const formId = `newsletter-${Math.random().toString(36).substr(2, 9)}`;
const emailId = `email-${formId}`;
const consentId = `consent-${formId}`;
---

<div 
  class={`newsletter-component ${variant === 'card' ? 'clinical-card p-6 rounded-lg' : ''} ${size === 'lg' ? 'max-w-2xl' : size === 'md' ? 'max-w-lg' : 'max-w-sm'}`}
  data-newsletter-variant={variant}
>
  <!-- Header Content -->
  {variant !== 'minimal' && (
    <div class="mb-6">
      <h3 class="text-lg font-semibold text-nbs-trust mb-2">{title}</h3>
      <p class="text-sm text-muted-foreground leading-relaxed">{description}</p>
    </div>
  )}

  <!-- Newsletter Form -->
  <form 
    name="newsletter"
    method="POST"
    data-netlify="true"
    data-netlify-honeypot="bot-field"
    action="/thank-you"
    class="newsletter-form space-y-4"
    id={formId}
    novalidate
  >
    <!-- Netlify form detection -->
    <input type="hidden" name="form-name" value="newsletter" />
    
    <!-- Honeypot field for spam protection -->
    <div class="sr-only">
      <label for="bot-field">Don't fill this out if you're human:</label>
      <input type="text" name="bot-field" id="bot-field" />
    </div>

    <!-- Email Input -->
    <div class="space-y-2">
      <label for={emailId} class="sr-only">Email address</label>
      <div class="relative">
        <input
          type="email"
          id={emailId}
          name="email"
          required
          placeholder={placeholder}
          class={`
            w-full px-4 py-3 text-sm bg-background border border-border rounded-lg
            focus:outline-none focus:ring-2 focus:ring-nbs-primary focus:border-transparent
            transition-all duration-200 placeholder:text-muted-foreground
            invalid:border-destructive invalid:ring-destructive/20
            ${size === 'lg' ? 'py-4 text-base' : size === 'sm' ? 'py-2 text-xs' : ''}
          `}
          aria-describedby={`${emailId}-description ${emailId}-error`}
        />
        <!-- Email validation icon -->
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <svg 
            class="w-4 h-4 text-muted-foreground email-valid-icon hidden" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          <svg 
            class="w-4 h-4 text-destructive email-invalid-icon hidden" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </div>
      </div>
      
      <!-- Email description -->
      <p id={`${emailId}-description`} class="text-xs text-muted-foreground">
        We respect your privacy. Unsubscribe at any time.
      </p>
      
      <!-- Error message -->
      <div 
        id={`${emailId}-error`} 
        class="text-xs text-destructive hidden" 
        role="alert" 
        aria-live="polite"
      >
        Please enter a valid email address.
      </div>
    </div>

    <!-- GDPR Consent Checkbox -->
    {showConsent && (
      <div class="flex items-start space-x-3">
        <input
          type="checkbox"
          id={consentId}
          name="consent"
          required
          class="mt-1 h-4 w-4 text-nbs-primary border-border rounded focus:ring-nbs-primary focus:ring-2 focus:ring-offset-0"
        />
        <label for={consentId} class="text-xs text-muted-foreground leading-relaxed flex-1">
          I agree to receive marketing emails from NBS Supplements and acknowledge the 
          <a 
            href="/privacy" 
            class="text-nbs-primary hover:text-nbs-accent underline underline-offset-2 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-nbs-primary rounded"
            target="_blank"
            rel="noopener noreferrer"
          >
            Privacy Policy
          </a>.
        </label>
      </div>
    )}

    <!-- Submit Button -->
    <button
      type="submit"
      class={`
        newsletter-submit w-full px-6 py-3 text-sm font-semibold text-white 
        bg-nbs-primary hover:bg-nbs-primary/90 active:bg-nbs-primary/95
        rounded-lg transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98]
        focus:outline-none focus:ring-2 focus:ring-nbs-primary focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none
        shadow-lg hover:shadow-xl
        ${size === 'lg' ? 'py-4 text-base' : size === 'sm' ? 'py-2 text-xs' : ''}
      `}
      disabled
    >
      <span class="submit-text">{buttonText}</span>
      <span class="loading-text hidden">Subscribing...</span>
      
      <!-- Loading spinner -->
      <svg 
        class="loading-spinner hidden w-4 h-4 ml-2 animate-spin" 
        fill="none" 
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </button>

    <!-- reCAPTCHA - Conditionally loaded -->
    <div class="flex justify-center">
      <div id="recaptcha-container" class="hidden"></div>
    </div>
  </form>

  <!-- Success Message -->
  <div class="newsletter-success hidden">
    <div class="text-center p-6 bg-nbs-success/10 border border-nbs-success/20 rounded-lg">
      <div class="w-12 h-12 mx-auto mb-4 bg-nbs-success/20 rounded-full flex items-center justify-center">
        <svg class="w-6 h-6 text-nbs-success" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      </div>
      <h4 class="text-lg font-semibold text-nbs-success mb-2">Thank You!</h4>
      <p class="text-sm text-foreground">
        You've successfully subscribed to our newsletter. Check your email for confirmation.
      </p>
    </div>
  </div>

  <!-- Error Message -->
  <div class="newsletter-error hidden">
    <div class="text-center p-6 bg-destructive/10 border border-destructive/20 rounded-lg">
      <div class="w-12 h-12 mx-auto mb-4 bg-destructive/20 rounded-full flex items-center justify-center">
        <svg class="w-6 h-6 text-destructive" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </div>
      <h4 class="text-lg font-semibold text-destructive mb-2">Oops!</h4>
      <p class="text-sm text-foreground mb-3">
        Something went wrong. Please try again.
      </p>
      <button 
        type="button" 
        class="retry-button text-sm text-nbs-primary hover:text-nbs-accent underline underline-offset-2 transition-colors duration-200"
      >
        Try Again
      </button>
    </div>
  </div>
</div>

<script>
  class NewsletterComponent {
    constructor(container) {
      this.container = container;
      this.form = container.querySelector('.newsletter-form');
      this.emailInput = container.querySelector('input[type="email"]');
      this.submitButton = container.querySelector('.newsletter-submit');
      this.consentCheckbox = container.querySelector('input[type="checkbox"]');
      this.successMessage = container.querySelector('.newsletter-success');
      this.errorMessage = container.querySelector('.newsletter-error');
      this.recaptchaContainer = container.querySelector('#recaptcha-container');
      this.recaptchaLoaded = false;
      
      this.init();
    }

    init() {
      if (!this.form || !this.emailInput || !this.submitButton) return;

      this.setupValidation();
      this.setupFormSubmission();
      this.setupRetryButton();
      this.setupConditionalRecaptcha();
    }
    
    setupConditionalRecaptcha() {
      // Load reCAPTCHA only when user starts interacting with form
      const loadRecaptcha = () => {
        if (this.recaptchaLoaded) return;
        this.recaptchaLoaded = true;
        
        // Add the data-netlify-recaptcha attribute
        this.form.setAttribute('data-netlify-recaptcha', 'true');
        
        // Create reCAPTCHA div
        if (this.recaptchaContainer) {
          this.recaptchaContainer.innerHTML = '<div data-netlify-recaptcha="true"></div>';
          this.recaptchaContainer.classList.remove('hidden');
        }
      };
      
      // Trigger reCAPTCHA load on first form interaction
      const interactionEvents = ['focus', 'click', 'input'];
      const onFirstInteraction = () => {
        loadRecaptcha();
        interactionEvents.forEach(event => {
          this.emailInput.removeEventListener(event, onFirstInteraction);
          this.submitButton.removeEventListener(event, onFirstInteraction);
        });
      };
      
      interactionEvents.forEach(event => {
        this.emailInput.addEventListener(event, onFirstInteraction, { once: true, passive: true });
        this.submitButton.addEventListener(event, onFirstInteraction, { once: true, passive: true });
      });
    }

    setupValidation() {
      // Email validation
      this.emailInput.addEventListener('input', () => {
        this.validateEmail();
        this.updateSubmitButton();
      });

      this.emailInput.addEventListener('blur', () => {
        this.showEmailValidation();
      });

      // Consent validation
      if (this.consentCheckbox) {
        this.consentCheckbox.addEventListener('change', () => {
          this.updateSubmitButton();
        });
      }
    }

    validateEmail() {
      const email = this.emailInput.value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    showEmailValidation() {
      const isValid = this.validateEmail();
      const validIcon = this.container.querySelector('.email-valid-icon');
      const invalidIcon = this.container.querySelector('.email-invalid-icon');
      const errorMessage = this.container.querySelector(`#${this.emailInput.id}-error`);

      if (this.emailInput.value.trim() === '') {
        // Hide all validation indicators when empty
        validIcon?.classList.add('hidden');
        invalidIcon?.classList.add('hidden');
        errorMessage?.classList.add('hidden');
        this.emailInput.classList.remove('border-destructive', 'border-nbs-success');
        return;
      }

      if (isValid) {
        validIcon?.classList.remove('hidden');
        invalidIcon?.classList.add('hidden');
        errorMessage?.classList.add('hidden');
        this.emailInput.classList.remove('border-destructive');
        this.emailInput.classList.add('border-nbs-success');
      } else {
        validIcon?.classList.add('hidden');
        invalidIcon?.classList.remove('hidden');
        errorMessage?.classList.remove('hidden');
        this.emailInput.classList.add('border-destructive');
        this.emailInput.classList.remove('border-nbs-success');
      }
    }

    updateSubmitButton() {
      const isEmailValid = this.validateEmail();
      const isConsentGiven = !this.consentCheckbox || this.consentCheckbox.checked;
      const isFormValid = isEmailValid && isConsentGiven;

      this.submitButton.disabled = !isFormValid;
      
      if (isFormValid) {
        this.submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
      } else {
        this.submitButton.classList.add('opacity-50', 'cursor-not-allowed');
      }
    }

    setupFormSubmission() {
      this.form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!this.validateEmail()) {
          this.showEmailValidation();
          return;
        }

        await this.submitForm();
      });
    }

    async submitForm() {
      const submitText = this.submitButton.querySelector('.submit-text');
      const loadingText = this.submitButton.querySelector('.loading-text');
      const loadingSpinner = this.submitButton.querySelector('.loading-spinner');

      // Show loading state
      this.submitButton.disabled = true;
      submitText?.classList.add('hidden');
      loadingText?.classList.remove('hidden');
      loadingSpinner?.classList.remove('hidden');

      try {
        const formData = new FormData(this.form);
        
        const response = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData).toString()
        });

        if (response.ok) {
          this.showSuccess();
        } else {
          throw new Error('Network response was not ok');
        }
      } catch (error) {
        console.error('Newsletter submission error:', error);
        this.showError();
      } finally {
        // Reset loading state
        this.submitButton.disabled = false;
        submitText?.classList.remove('hidden');
        loadingText?.classList.add('hidden');
        loadingSpinner?.classList.add('hidden');
      }
    }

    showSuccess() {
      this.form.classList.add('hidden');
      this.successMessage?.classList.remove('hidden');
      this.errorMessage?.classList.add('hidden');

      // Track success event (analytics)
      if (typeof gtag !== 'undefined') {
        gtag('event', 'newsletter_signup', {
          event_category: 'engagement',
          event_label: 'footer_newsletter'
        });
      }
    }

    showError() {
      this.errorMessage?.classList.remove('hidden');
      this.successMessage?.classList.add('hidden');
    }

    setupRetryButton() {
      const retryButton = this.container.querySelector('.retry-button');
      if (!retryButton) return;

      retryButton.addEventListener('click', () => {
        this.form.classList.remove('hidden');
        this.errorMessage?.classList.add('hidden');
        this.successMessage?.classList.add('hidden');
        
        // Reset form validation
        this.emailInput.focus();
        this.updateSubmitButton();
      });
    }
  }

  // Initialize newsletter components
  function initNewsletterComponents() {
    const newsletterContainers = document.querySelectorAll('.newsletter-component');
    newsletterContainers.forEach(container => {
      new NewsletterComponent(container);
    });
  }

  // Initialize on load
  document.addEventListener('DOMContentLoaded', initNewsletterComponents);
  document.addEventListener('astro:page-load', initNewsletterComponents);
</script>

<style>
  /* Newsletter component animations */
  .newsletter-component {
    transition: all 0.3s ease-in-out;
  }

  /* Form field animations */
  .newsletter-form input:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px hsl(var(--nbs-primary) / 0.15);
  }

  /* Button hover effects */
  .newsletter-submit:not(:disabled):hover {
    box-shadow: 0 8px 25px -5px hsl(var(--nbs-primary) / 0.3);
  }

  /* Success/Error message animations */
  .newsletter-success,
  .newsletter-error {
    animation: slide-up 0.4s ease-out;
  }

  @keyframes slide-up {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Loading spinner animation */
  .loading-spinner {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Checkbox custom styling */
  input[type="checkbox"]:checked {
    background-color: hsl(var(--nbs-primary));
    border-color: hsl(var(--nbs-primary));
  }

  /* Focus indicators for accessibility */
  input:focus-visible,
  button:focus-visible {
    outline: 2px solid hsl(var(--nbs-primary));
    outline-offset: 2px;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .newsletter-component {
      border: 2px solid;
    }
    
    .newsletter-submit {
      border: 2px solid;
    }
  }

  /* Reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .newsletter-component,
    .newsletter-form input,
    .newsletter-submit,
    .newsletter-success,
    .newsletter-error {
      transition: none;
      animation: none;
    }
    
    .loading-spinner {
      animation: none;
    }
  }
</style>