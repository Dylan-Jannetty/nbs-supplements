---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/globals.css';
import '../styles/product-enhancements.css';

export interface Props {
  title: string;
  description: string;
  image?: string;
  canonical?: string;
  type?: 'website' | 'article' | 'product';
  noindex?: boolean;
  structuredData?: any;
  ogTitle?: string;
  ogDescription?: string;
  ogImage?: string;
  twitterTitle?: string;
  twitterDescription?: string;
  bodyClass?: string;
}

const { 
  title, 
  description, 
  image = '/images/og-default.jpg',
  canonical,
  type = 'website',
  noindex = false,
  structuredData,
  ogTitle,
  ogDescription,
  ogImage: ogImageProp,
  twitterTitle,
  twitterDescription,
  bodyClass = ''
} = Astro.props;

const siteUrl = 'https://supplements-nbs.com';
const canonicalUrl = canonical || new URL(Astro.url.pathname, siteUrl).href;
const ogImage = new URL(ogImageProp || image, siteUrl).href;

// Enhanced meta values
const finalOgTitle = ogTitle || title;
const finalOgDescription = ogDescription || description;
const finalTwitterTitle = twitterTitle || finalOgTitle;
const finalTwitterDescription = twitterDescription || finalOgDescription;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalUrl} />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    {noindex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:title" content={finalOgTitle} />
    <meta property="og:description" content={finalOgDescription} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content={finalOgTitle} />
    <meta property="og:site_name" content="NBS Supplements" />
    <meta property="og:locale" content="en_US" />
    <meta property="article:author" content="NBS Supplements" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:site" content="@nbssupplements" />
    <meta property="twitter:creator" content="@nbssupplements" />
    <meta property="twitter:url" content={canonicalUrl} />
    <meta property="twitter:title" content={finalTwitterTitle} />
    <meta property="twitter:description" content={finalTwitterDescription} />
    <meta property="twitter:image" content={ogImage} />
    <meta property="twitter:image:alt" content={finalTwitterTitle} />
    
    <!-- Additional Meta Tags -->
    <meta name="author" content="NBS Supplements" />
    <meta name="copyright" content="NBS Supplements" />
    <meta name="language" content="English" />
    <meta name="revisit-after" content="7 days" />
    
    <!-- Schema.org Structured Data -->
    {structuredData ? (
      <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    ) : (
      <script type="application/ld+json">
        {
          "@context": "https://schema.org",
          "@type": "Organization",
          "name": "NBS Supplements",
          "alternateName": "No Bullsh*t Supplements",
          "url": "https://supplements-nbs.com",
          "logo": "https://supplements-nbs.com/images/logo.png",
          "description": "Clean, natural supplements formulated by pharmacists. Clinically dosed ingredients, third-party tested, and completely transparent.",
          "founder": {
            "@type": "Person",
            "name": "NBS Pharmacist Team"
          },
          "foundingDate": "2023",
          "address": {
            "@type": "PostalAddress",
            "addressRegion": "NJ",
            "addressCountry": "US"
          },
          "sameAs": [
            "https://www.instagram.com/nbssupplements/",
            "https://www.facebook.com/nbssupplements/"
          ]
        }
      </script>
    )}
    
    <!-- Theme Detection Script -->
    <script is:inline>
      // Theme detection and application
      function getThemePreference() {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      }
      
      function setTheme(theme) {
        if (theme === 'light') {
          document.documentElement.classList.remove('dark');
        } else {
          document.documentElement.classList.add('dark');
        }
        localStorage.setItem('theme', theme);
      }
      
      // Apply theme immediately to prevent flash
      setTheme(getThemePreference());
      
      // Listen for theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem('theme')) {
          setTheme(e.matches ? 'dark' : 'light');
        }
      });
    </script>
    
    <!-- Critical CSS for above-the-fold content -->
    <style>
      /* Critical CSS for initial paint */
      body { font-family: 'Inter', system-ui, sans-serif; }
      .hero-section { min-height: 60vh; }
      .nbs-primary { color: hsl(203 89% 53%); }
      .nbs-trust { color: hsl(203 23% 30%); }
      .clinical-card { background: hsl(210 20% 98%); border-radius: 0.5rem; }
    </style>
    
    <!-- Google Analytics 4 with Enhanced E-commerce - Deferred for INP -->
    <!-- <script>
      // Load GA4 after page load to improve INP
      window.addEventListener('load', function() {
        const script = document.createElement('script');
        script.async = true;
        script.src = 'https://www.googletagmanager.com/gtag/js?id=G-117M1HYTL2';
        document.head.appendChild(script);
      });
    </script> -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-117M1HYTL2"></script>

    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      // Configure GA4 with enhanced e-commerce
      gtag('config', 'G-117M1HYTL2', {
        // Enhanced e-commerce settings
        allow_enhanced_conversions: true,
        send_page_view: true,
        // Privacy settings
        anonymize_ip: true,
        // Performance settings
        cookie_expires: 60 * 60 * 24 * 28, // 28 days
      });

      // Track page views with enhanced data
      gtag('event', 'page_view', {
        page_title: document.title,
        page_location: window.location.href,
        content_group1: 'NBS Supplements',
        custom_map: {
          dimension1: 'supplement_site'
        }
      });
    </script>

    <!-- Enhanced E-commerce Event Tracking -->
    <script is:inline>
      // Enhanced e-commerce tracking functions
      window.trackPurchase = function(orderId, value, items) {
        gtag('event', 'purchase', {
          transaction_id: orderId,
          value: value,
          currency: 'USD',
          items: items,
          // Enhanced e-commerce parameters
          affiliation: 'NBS Supplements',
          shipping: 0,
          tax: 0
        });
      };

      // Newsletter signup tracking
      window.trackNewsletterSignup = function(method = 'newsletter_form') {
        gtag('event', 'generate_lead', {
          currency: 'USD',
          value: 5.00, // Estimated lead value
          method: method,
          content_group: 'newsletter'
        });
      };

      // Contact form submission tracking
      window.trackContactForm = function(formType = 'contact') {
        gtag('event', 'form_submit', {
          form_name: formType,
          engagement_time_msec: Date.now() - performance.timeOrigin,
          content_group: 'contact'
        });
      };

      // Product view tracking
      window.trackProductView = function(productData) {
        gtag('event', 'view_item', {
          currency: 'USD',
          value: productData.price || 39.99,
          items: [{
            item_id: productData.id || 'catalyst-preworkout',
            item_name: productData.name || 'Catalyst Pre-Workout',
            category: 'Supplements',
            price: productData.price || 39.99,
            quantity: 1
          }]
        });
      };

      // Blog engagement tracking
      window.trackBlogEngagement = function(action, articleTitle) {
        gtag('event', action, {
          content_type: 'article',
          content_id: articleTitle,
          engagement_time_msec: Date.now() - performance.timeOrigin
        });
      };

      // Scroll depth tracking
      let scrollTracked = [];
      window.trackScrollDepth = function() {
        const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
        const milestones = [25, 50, 75, 90];
        
        milestones.forEach(milestone => {
          if (scrollPercent >= milestone && !scrollTracked.includes(milestone)) {
            scrollTracked.push(milestone);
            gtag('event', 'scroll', {
              percent_scrolled: milestone,
              engagement_time_msec: Date.now() - performance.timeOrigin
            });
          }
        });
      };

      // Attach optimized scroll tracking with passive listeners
      if (typeof window !== 'undefined') {
        let ticking = false;
        
        const optimizedScrollHandler = () => {
          if (!ticking) {
            requestAnimationFrame(() => {
              trackScrollDepth();
              ticking = false;
            });
            ticking = true;
          }
        };
        
        window.addEventListener('scroll', optimizedScrollHandler, { passive: true });
      }
    </script>
    
    <!-- Preload critical resources for LCP optimization -->
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'" />
    <noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" /></noscript>
    
    <!-- Preload critical images for LCP -->
    {Astro.url.pathname === '/' && (
      <link rel="preload" as="image" href="/src/images/catalyst-stacked.png" />
    )}
    
    <!-- DNS prefetch for third-party resources -->
    <link rel="dns-prefetch" href="https://www.googletagmanager.com" />
    <link rel="dns-prefetch" href="https://gumroad.com" />
    
    <!-- Preconnect to critical third-party origins -->
    <link rel="preconnect" href="https://www.googletagmanager.com" crossorigin />
    <link rel="preconnect" href="https://gumroad.com" crossorigin />
    
    <!-- Performance hints for better resource loading -->
    <link rel="dns-prefetch" href="https://fonts.gstatic.com" />
    <link rel="dns-prefetch" href="https://www.google-analytics.com" />
    
    <!-- Critical resource hints for faster loading -->
    <meta name="format-detection" content="telephone=no" />
    <meta name="theme-color" content="#2563eb" />
    <meta name="msapplication-TileColor" content="#2563eb" />
    
  </head>
  
  <body class={`min-h-screen bg-background font-sans antialiased ${bodyClass}`.trim()}>
    <!-- Skip to main content link for accessibility -->
    <a 
      href="#main-content" 
      class="sr-only focus:not-sr-only focus:fixed focus:top-4 focus:left-4 z-50 bg-primary text-primary-foreground px-4 py-2 rounded-md font-medium"
    >
      Skip to main content
    </a>
    
    <!-- Header -->
    <Header />
    
    <!-- Main Content -->
    <main id="main-content" class="flex-1">
      <slot />
    </main>
    
    <!-- Footer -->
    <Footer />
    
    <!-- Theme Toggle Script -->
    <script>
      // Theme toggle functionality
      function toggleTheme() {
        const currentTheme = localStorage.getItem('theme') || 'light';
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        
        // Use requestAnimationFrame to ensure smooth visual updates
        requestAnimationFrame(() => {
          if (newTheme === 'light') {
            document.documentElement.classList.remove('dark');
          } else {
            document.documentElement.classList.add('dark');
          }
          
          localStorage.setItem('theme', newTheme);
          
          // Dispatch custom event with minimal payload
          window.dispatchEvent(new CustomEvent('theme-change', { 
            detail: { theme: newTheme },
            bubbles: false,
            cancelable: false
          }));
        });
      }
      
      // Make toggle function available globally
      window.toggleTheme = toggleTheme;
    </script>
    
    <!-- Enhanced Gumroad Script Loader with Conversion Tracking - Optimized for INP -->
    <script>
      // Optimized Gumroad loading with interaction-based loading
      const loadGumroad = () => {
        // Check if Gumroad is already loaded
        if (window.GumroadOverlay) {
          return;
        }
        
        // Check if script is already being loaded
        if (document.getElementById('gumroad-script')) {
          return;
        }
        
        // Create and load the Gumroad script
        const script = document.createElement('script');
        script.id = 'gumroad-script';
        script.src = 'https://gumroad.com/js/gumroad.js';
        script.async = true;
        script.onload = () => {
          console.log('Gumroad script loaded successfully');
          
          // Set up Gumroad event listeners for conversion tracking
          if (window.GumroadOverlay) {
            // Track when checkout overlay opens
            const originalOpen = window.GumroadOverlay.open;
            window.GumroadOverlay.open = function(...args) {
              // Track begin_checkout event
              if (typeof gtag !== 'undefined') {
                gtag('event', 'begin_checkout', {
                  currency: 'USD',
                  value: 39.99,
                  items: [{
                    item_id: 'catalyst-preworkout',
                    item_name: 'Catalyst Pre-Workout',
                    category: 'Supplements',
                    price: 39.99,
                    quantity: 1
                  }]
                });
              }
              return originalOpen.apply(this, args);
            };
          }
        };
        script.onerror = () => {
          console.error('Failed to load Gumroad script');
        };
        document.head.appendChild(script);
      };
      
      // Enhanced click tracking for Gumroad buttons
      const trackGumroadClick = (element) => {
        const productName = element.textContent || 'Catalyst Pre-Workout';
        const price = 39.99;
        
        // Track add_to_cart event
        if (typeof gtag !== 'undefined') {
          gtag('event', 'add_to_cart', {
            currency: 'USD',
            value: price,
            items: [{
              item_id: 'catalyst-preworkout',
              item_name: productName,
              category: 'Supplements',
              price: price,
              quantity: 1
            }]
          });
        }
      };
      
      // Make functions available globally
      window.loadGumroad = loadGumroad;
      window.trackGumroadClick = trackGumroadClick;
      
      // Load Gumroad only on user interaction for better INP
      document.addEventListener('DOMContentLoaded', () => {
        // Use passive event listeners for better performance
        const gumroadButtons = document.querySelectorAll('.gumroad-button, [data-gumroad-single-product]');
        
        let gumroadLoaded = false;
        
        gumroadButtons.forEach(button => {
          // Use passive listeners and load Gumroad on first interaction
          button.addEventListener('mouseenter', () => {
            if (!gumroadLoaded) {
              loadGumroad();
              gumroadLoaded = true;
            }
          }, { passive: true, once: true });
          
          button.addEventListener('click', () => {
            if (!gumroadLoaded) {
              loadGumroad();
              gumroadLoaded = true;
            }
            trackGumroadClick(button);
          }, { passive: true });
        });
      });

      // Listen for successful purchases (Gumroad postMessage events)
      window.addEventListener('message', (event) => {
        if (event.origin === 'https://gumroad.com' && event.data) {
          if (event.data.type === 'gumroad:purchase_complete') {
            const purchaseData = event.data.data;
            
            // Track purchase conversion
            if (typeof gtag !== 'undefined' && typeof window.trackPurchase === 'function') {
              window.trackPurchase(
                purchaseData.order_id || 'gumroad_' + Date.now(),
                purchaseData.price || 39.99,
                [{
                  item_id: 'catalyst-preworkout',
                  item_name: 'Catalyst Pre-Workout',
                  category: 'Supplements',
                  price: purchaseData.price || 39.99,
                  quantity: 1
                }]
              );
            }
          }
        }
      });
    </script>

    <!-- Core Web Vitals Performance Monitoring -->
    <script>
      // Import and initialize performance monitoring
      import('/src/lib/performance-monitor.js').then(({ performanceMonitor }) => {
        // Performance monitoring is automatically initialized
        
        // Report summary when user is about to leave
        window.addEventListener('beforeunload', () => {
          performanceMonitor.reportSummary();
        });
        
        // Report summary on visibility change (tab switching)
        document.addEventListener('visibilitychange', () => {
          if (document.visibilityState === 'hidden') {
            performanceMonitor.reportSummary();
          }
        });
      }).catch(err => {
        console.warn('Performance monitoring failed to load:', err);
      });
    </script>
  </body>
</html>